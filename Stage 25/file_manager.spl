alias fn_num R1;
alias arg1 R2;
alias arg2 R3;
alias arg3 R4;

//Buffer Write
if(fn_num == 1) then
    alias buffer_no R5;
    buffer_no = arg1%4;

    multipush(R1, R2, R3, R4, R5);
    R1 = 1;  //acquire buffer
    R2 = buffer_no;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5);

    R6 = BUFFER_TABLE + 4*buffer_no;
    if([R6] != arg1) then
        if([R6 + 1] == 1) then
            multipush(R1, R2, R3, R4, R5, R6);
            R1 = 1;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = BUFFER_BASE + buffer_no;
            R4 = [R6];
            call DEVICE_MANAGER;
            multipop(R1, R2, R3, R4, R5, R6);

            [R6 + 1] = 0; 
        endif;


        multipush(R1, R2, R3, R4, R5, R6);
        R1 = 2; 
        R4 = arg1;  
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = BUFFER_BASE + buffer_no; 
        call DEVICE_MANAGER;
        multipop(R1, R2, R3, R4, R5, R6);

        [R6] = arg1;
    endif;

    [(BUFFER_BASE + buffer_no)*512 + arg2] = arg3;
    [R6 + 1] = 1;

    multipush(R1, R2, R3, R4, R5, R6);
    R1 = 2; 
    R2 = buffer_no;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5, R6);

    R0 = 0;
    return;
endif;
 
//BUffer Read
if(fn_num == 2) then
    alias buffer_no R5;
    buffer_no = arg1%4;
    
    multipush(R1, R2, R3, R4, R5);
    R1 = 1; 
    R2 = buffer_no;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5);
    
    R6 = BUFFER_TABLE + 4*buffer_no;
    if([R6] != arg1) then
        if([R6 + 1] == 1) then
            multipush(R1, R2, R3, R4, R5, R6);
            R1 = 1;  
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = BUFFER_BASE + buffer_no;
            R4 = [R6];
            call DEVICE_MANAGER;
            multipop(R1, R2, R3, R4, R5, R6);

            [R6 + 1] = 0;
        endif;

        multipush(R1, R2, R3, R4, R5, R6);
        R1 = 2; 
        R4 = arg1;  
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = BUFFER_BASE + buffer_no; 
        call DEVICE_MANAGER;
        multipop(R1, R2, R3, R4, R5, R6);

        [R6 + 0] = arg1;
    endif;
    
    [arg3] = [(BUFFER_BASE + buffer_no)*512 + arg2];

    multipush(R1, R2, R3, R4);
    R1 = 2;
    R2 = buffer_no;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4);

    R0 = 0;
    return;
endif;
     
//Open
if(fn_num == 3) then
    R5 = 0;
    while(R5 < MAX_FILE_NUM) do
        if([INODE_TABLE + 16*R5 + 1] == arg1) then
            break;
        endif;
        R5 = R5 + 1;
    endwhile;

    if(R5 >= MAX_FILE_NUM) then
        R0 = -1;
        return;
    endif;

    if([INODE_TABLE + 16*R5 + 0] == EXEC) then
        R0 = -1;
        return;
    endif;

    multipush(R1, R2, R3, R4, R5);
    R1 = 4;
    R2 = R5;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5);

    if(R0 == -1) then
        return;
    endif;

    R6 = 0;
    while(R6 < MAX_OPENFILE_NUM) do
        if([OPEN_FILE_TABLE + 4*R6 + 0] == -1) then
            break;
        endif;
        R6 = R6 + 1;
    endwhile;

    if(R6 >= MAX_OPENFILE_NUM) then

        multipush(R1, R2, R3, R4, R5);
        R1 = 5;
        R2 = R5;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call RESOURCE_MANAGER;
        multipop(R1, R2, R3, R4, R5);

        R0 = -2;
        return;
    endif;
    if(arg1 == "root") then
        [OPEN_FILE_TABLE + 4*R6 + 0] = INODE_ROOT; 
    else
        R7 = FILE_STATUS_TABLE + 4*R5;
        if([R7 + 1] == -1) then
            [R7 + 1] = 1;
        else
            [R7 + 1] = [R7 + 1] + 1;
        endif;
        [OPEN_FILE_TABLE + 4*R6 + 0] = R5; 
    endif;
    [OPEN_FILE_TABLE + 4*R6 + 1] = 1; 
    [OPEN_FILE_TABLE + 4*R6 + 2] = 0;

    multipush(R1, R2, R3, R4, R5);
    R1 = 5;  //release inode
    R2 = R5;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call RESOURCE_MANAGER;
    multipop(R1, R2, R3, R4, R5);

    R0 = R6;
    return;
endif;

//Close
if(fn_num == 4) then 
    R7 = OPEN_FILE_TABLE + 4*arg1;
    R5 = [R7 + 0];

    [R7 + 1] = [R7 + 1] - 1; 

    if([R7 + 1] == 0) then
        [R7 + 0] = -1;
        [R7 + 1] = -1;
        [R7 + 2] = -1;
        
        if(R5 != INODE_ROOT) then
            [FILE_STATUS_TABLE + 4*R5 + 1] = [FILE_STATUS_TABLE + 4*R5 + 1] - 1;
        endif;

        if([FILE_STATUS_TABLE + 4*R5 + 1] == 0) then
            [FILE_STATUS_TABLE + 4*R5 + 1] = -1;
        endif;
    endif;

    R0 = 0;
    return;
endif;
